{"version":3,"sources":["webpack:///./node_modules/core-js/modules/es6.string.anchor.js","webpack:///./node_modules/core-js/modules/_string-html.js","webpack:///./node_modules/typed.js/lib/typed.js"],"names":["__webpack_require__","createHTML","name","this","$export","fails","defined","quot","string","tag","attribute","value","S","String","p1","replace","module","exports","NAME","exec","O","P","F","test","toLowerCase","split","length","factory","modules","installedModules","moduleId","id","loaded","call","m","c","p","Object","defineProperty","_createClass","defineProperties","target","props","i","descriptor","enumerable","configurable","writable","key","Constructor","protoProps","staticProps","prototype","_initializerJs","_htmlParserJs","Typed","elementId","options","instance","TypeError","_classCallCheck","initializer","load","begin","pause","status","start","stop","typingComplete","toggleBlinking","onStop","arrayPos","typewrite","curString","curStrPos","backspace","onStart","reset","onDestroy","restart","arguments","undefined","clearInterval","timeout","replaceText","cursor","parentNode","removeChild","strPos","curLoop","insertCursor","onReset","_this","shuffleStringsIfNeeded","bindInputFocusEvents","bindFocusEvents","setTimeout","currentElContent","strings","sequence","startDelay","_this2","fadeOut","el","classList","contains","fadeOutClass","remove","humanize","humanizer","typeSpeed","numChars","htmlParser","typeHtmlChars","pauseTime","substr","charAt","skip","parseInt","temporaryPause","onTypingPaused","substring","stringBeforeSkip","stringSkipped","stringAfterSkip","doneTyping","keepTyping","onTypingResumed","setPauseStatus","preStringTyped","nextString","_this3","onStringTyped","complete","loop","loopCount","backDelay","_this4","initFadeOut","backSpeed","backSpaceHtmlChars","curStringAtPosition","smartBackspace","stopNum","onLastStringBackspaced","onComplete","isTyping","isBlinking","cursorBlinking","add","speed","Math","round","random","shuffle","sort","_this5","className","fadeOutDelay","str","attr","setAttribute","isInput","contentType","innerHTML","textContent","_this6","addEventListener","e","showCursor","document","createElement","cursorChar","insertBefore","nextSibling","_extends","assign","source","hasOwnProperty","obj","_defaultsJs","_defaultsJs2","__esModule","default","Initializer","self","querySelector","tagName","elContent","getAttribute","isPaused","map","s","trim","stringsElement","style","display","Array","slice","apply","children","stringsLength","stringEl","push","getCurrentElContent","autoInsertCss","appendAnimationCss","css","type","innerCss","body","appendChild","defaults","Infinity","HTMLParser","curChar","endTag"],"mappings":"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","file":"7-73277515936a52095cfe.js","sourcesContent":["'use strict';\n// B.2.3.2 String.prototype.anchor(name)\nrequire('./_string-html')('anchor', function (createHTML) {\n  return function anchor(name) {\n    return createHTML(this, 'a', 'name', name);\n  };\n});\n","var $export = require('./_export');\nvar fails = require('./_fails');\nvar defined = require('./_defined');\nvar quot = /\"/g;\n// B.2.3.2.1 CreateHTML(string, tag, attribute, value)\nvar createHTML = function (string, tag, attribute, value) {\n  var S = String(defined(string));\n  var p1 = '<' + tag;\n  if (attribute !== '') p1 += ' ' + attribute + '=\"' + String(value).replace(quot, '&quot;') + '\"';\n  return p1 + '>' + S + '</' + tag + '>';\n};\nmodule.exports = function (NAME, exec) {\n  var O = {};\n  O[NAME] = exec(createHTML);\n  $export($export.P + $export.F * fails(function () {\n    var test = ''[NAME]('\"');\n    return test !== test.toLowerCase() || test.split('\"').length > 3;\n  }), 'String', O);\n};\n","require(\"core-js/modules/es6.string.trim\");\n\nrequire(\"core-js/modules/es6.array.map\");\n\nrequire(\"core-js/modules/es6.object.assign\");\n\nrequire(\"core-js/modules/es6.array.sort\");\n\nrequire(\"core-js/modules/es6.object.define-property\");\n\n/*!\n * \n *   typed.js - A JavaScript Typing Animation Library\n *   Author: Matt Boldt <me@mattboldt.com>\n *   Version: v2.0.9\n *   Url: https://github.com/mattboldt/typed.js\n *   License(s): MIT\n * \n */\n(function webpackUniversalModuleDefinition(root, factory) {\n  if (typeof exports === 'object' && typeof module === 'object') module.exports = factory();else if (typeof define === 'function' && define.amd) define([], factory);else if (typeof exports === 'object') exports[\"Typed\"] = factory();else root[\"Typed\"] = factory();\n})(this, function () {\n  return (\n    /******/\n    function (modules) {\n      // webpackBootstrap\n\n      /******/\n      // The module cache\n\n      /******/\n      var installedModules = {};\n      /******/\n\n      /******/\n      // The require function\n\n      /******/\n\n      function __webpack_require__(moduleId) {\n        /******/\n\n        /******/\n        // Check if module is in cache\n\n        /******/\n        if (installedModules[moduleId])\n          /******/\n          return installedModules[moduleId].exports;\n        /******/\n\n        /******/\n        // Create a new module (and put it into the cache)\n\n        /******/\n\n        var module = installedModules[moduleId] = {\n          /******/\n          exports: {},\n\n          /******/\n          id: moduleId,\n\n          /******/\n          loaded: false\n          /******/\n\n        };\n        /******/\n\n        /******/\n        // Execute the module function\n\n        /******/\n\n        modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n        /******/\n\n        /******/\n        // Flag the module as loaded\n\n        /******/\n\n        module.loaded = true;\n        /******/\n\n        /******/\n        // Return the exports of the module\n\n        /******/\n\n        return module.exports;\n        /******/\n      }\n      /******/\n\n      /******/\n\n      /******/\n      // expose the modules object (__webpack_modules__)\n\n      /******/\n\n\n      __webpack_require__.m = modules;\n      /******/\n\n      /******/\n      // expose the module cache\n\n      /******/\n\n      __webpack_require__.c = installedModules;\n      /******/\n\n      /******/\n      // __webpack_public_path__\n\n      /******/\n\n      __webpack_require__.p = \"\";\n      /******/\n\n      /******/\n      // Load entry module and return exports\n\n      /******/\n\n      return __webpack_require__(0);\n      /******/\n    }(\n    /************************************************************************/\n\n    /******/\n    [\n    /* 0 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      'use strict';\n\n      Object.defineProperty(exports, '__esModule', {\n        value: true\n      });\n\n      var _createClass = function () {\n        function defineProperties(target, props) {\n          for (var i = 0; i < props.length; i++) {\n            var descriptor = props[i];\n            descriptor.enumerable = descriptor.enumerable || false;\n            descriptor.configurable = true;\n            if ('value' in descriptor) descriptor.writable = true;\n            Object.defineProperty(target, descriptor.key, descriptor);\n          }\n        }\n\n        return function (Constructor, protoProps, staticProps) {\n          if (protoProps) defineProperties(Constructor.prototype, protoProps);\n          if (staticProps) defineProperties(Constructor, staticProps);\n          return Constructor;\n        };\n      }();\n\n      function _classCallCheck(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n          throw new TypeError('Cannot call a class as a function');\n        }\n      }\n\n      var _initializerJs = __webpack_require__(1);\n\n      var _htmlParserJs = __webpack_require__(3);\n      /**\n       * Welcome to Typed.js!\n       * @param {string} elementId HTML element ID _OR_ HTML element\n       * @param {object} options options object\n       * @returns {object} a new Typed object\n       */\n\n\n      var Typed = function () {\n        function Typed(elementId, options) {\n          _classCallCheck(this, Typed); // Initialize it up\n\n\n          _initializerJs.initializer.load(this, options, elementId); // All systems go!\n\n\n          this.begin();\n        }\n        /**\n         * Toggle start() and stop() of the Typed instance\n         * @public\n         */\n\n\n        _createClass(Typed, [{\n          key: 'toggle',\n          value: function toggle() {\n            this.pause.status ? this.start() : this.stop();\n          }\n          /**\n           * Stop typing / backspacing and enable cursor blinking\n           * @public\n           */\n\n        }, {\n          key: 'stop',\n          value: function stop() {\n            if (this.typingComplete) return;\n            if (this.pause.status) return;\n            this.toggleBlinking(true);\n            this.pause.status = true;\n            this.options.onStop(this.arrayPos, this);\n          }\n          /**\n           * Start typing / backspacing after being stopped\n           * @public\n           */\n\n        }, {\n          key: 'start',\n          value: function start() {\n            if (this.typingComplete) return;\n            if (!this.pause.status) return;\n            this.pause.status = false;\n\n            if (this.pause.typewrite) {\n              this.typewrite(this.pause.curString, this.pause.curStrPos);\n            } else {\n              this.backspace(this.pause.curString, this.pause.curStrPos);\n            }\n\n            this.options.onStart(this.arrayPos, this);\n          }\n          /**\n           * Destroy this instance of Typed\n           * @public\n           */\n\n        }, {\n          key: 'destroy',\n          value: function destroy() {\n            this.reset(false);\n            this.options.onDestroy(this);\n          }\n          /**\n           * Reset Typed and optionally restarts\n           * @param {boolean} restart\n           * @public\n           */\n\n        }, {\n          key: 'reset',\n          value: function reset() {\n            var restart = arguments.length <= 0 || arguments[0] === undefined ? true : arguments[0];\n            clearInterval(this.timeout);\n            this.replaceText('');\n\n            if (this.cursor && this.cursor.parentNode) {\n              this.cursor.parentNode.removeChild(this.cursor);\n              this.cursor = null;\n            }\n\n            this.strPos = 0;\n            this.arrayPos = 0;\n            this.curLoop = 0;\n\n            if (restart) {\n              this.insertCursor();\n              this.options.onReset(this);\n              this.begin();\n            }\n          }\n          /**\n           * Begins the typing animation\n           * @private\n           */\n\n        }, {\n          key: 'begin',\n          value: function begin() {\n            var _this = this;\n\n            this.typingComplete = false;\n            this.shuffleStringsIfNeeded(this);\n            this.insertCursor();\n            if (this.bindInputFocusEvents) this.bindFocusEvents();\n            this.timeout = setTimeout(function () {\n              // Check if there is some text in the element, if yes start by backspacing the default message\n              if (!_this.currentElContent || _this.currentElContent.length === 0) {\n                _this.typewrite(_this.strings[_this.sequence[_this.arrayPos]], _this.strPos);\n              } else {\n                // Start typing\n                _this.backspace(_this.currentElContent, _this.currentElContent.length);\n              }\n            }, this.startDelay);\n          }\n          /**\n           * Called for each character typed\n           * @param {string} curString the current string in the strings array\n           * @param {number} curStrPos the current position in the curString\n           * @private\n           */\n\n        }, {\n          key: 'typewrite',\n          value: function typewrite(curString, curStrPos) {\n            var _this2 = this;\n\n            if (this.fadeOut && this.el.classList.contains(this.fadeOutClass)) {\n              this.el.classList.remove(this.fadeOutClass);\n              if (this.cursor) this.cursor.classList.remove(this.fadeOutClass);\n            }\n\n            var humanize = this.humanizer(this.typeSpeed);\n            var numChars = 1;\n\n            if (this.pause.status === true) {\n              this.setPauseStatus(curString, curStrPos, true);\n              return;\n            } // contain typing function in a timeout humanize'd delay\n\n\n            this.timeout = setTimeout(function () {\n              // skip over any HTML chars\n              curStrPos = _htmlParserJs.htmlParser.typeHtmlChars(curString, curStrPos, _this2);\n              var pauseTime = 0;\n              var substr = curString.substr(curStrPos); // check for an escape character before a pause value\n              // format: \\^\\d+ .. eg: ^1000 .. should be able to print the ^ too using ^^\n              // single ^ are removed from string\n\n              if (substr.charAt(0) === '^') {\n                if (/^\\^\\d+/.test(substr)) {\n                  var skip = 1; // skip at least 1\n\n                  substr = /\\d+/.exec(substr)[0];\n                  skip += substr.length;\n                  pauseTime = parseInt(substr);\n                  _this2.temporaryPause = true;\n\n                  _this2.options.onTypingPaused(_this2.arrayPos, _this2); // strip out the escape character and pause value so they're not printed\n\n\n                  curString = curString.substring(0, curStrPos) + curString.substring(curStrPos + skip);\n\n                  _this2.toggleBlinking(true);\n                }\n              } // check for skip characters formatted as\n              // \"this is a `string to print NOW` ...\"\n\n\n              if (substr.charAt(0) === '`') {\n                while (curString.substr(curStrPos + numChars).charAt(0) !== '`') {\n                  numChars++;\n                  if (curStrPos + numChars > curString.length) break;\n                } // strip out the escape characters and append all the string in between\n\n\n                var stringBeforeSkip = curString.substring(0, curStrPos);\n                var stringSkipped = curString.substring(stringBeforeSkip.length + 1, curStrPos + numChars);\n                var stringAfterSkip = curString.substring(curStrPos + numChars + 1);\n                curString = stringBeforeSkip + stringSkipped + stringAfterSkip;\n                numChars--;\n              } // timeout for any pause after a character\n\n\n              _this2.timeout = setTimeout(function () {\n                // Accounts for blinking while paused\n                _this2.toggleBlinking(false); // We're done with this sentence!\n\n\n                if (curStrPos >= curString.length) {\n                  _this2.doneTyping(curString, curStrPos);\n                } else {\n                  _this2.keepTyping(curString, curStrPos, numChars);\n                } // end of character pause\n\n\n                if (_this2.temporaryPause) {\n                  _this2.temporaryPause = false;\n\n                  _this2.options.onTypingResumed(_this2.arrayPos, _this2);\n                }\n              }, pauseTime); // humanized value for typing\n            }, humanize);\n          }\n          /**\n           * Continue to the next string & begin typing\n           * @param {string} curString the current string in the strings array\n           * @param {number} curStrPos the current position in the curString\n           * @private\n           */\n\n        }, {\n          key: 'keepTyping',\n          value: function keepTyping(curString, curStrPos, numChars) {\n            // call before functions if applicable\n            if (curStrPos === 0) {\n              this.toggleBlinking(false);\n              this.options.preStringTyped(this.arrayPos, this);\n            } // start typing each new char into existing string\n            // curString: arg, this.el.html: original text inside element\n\n\n            curStrPos += numChars;\n            var nextString = curString.substr(0, curStrPos);\n            this.replaceText(nextString); // loop the function\n\n            this.typewrite(curString, curStrPos);\n          }\n          /**\n           * We're done typing all strings\n           * @param {string} curString the current string in the strings array\n           * @param {number} curStrPos the current position in the curString\n           * @private\n           */\n\n        }, {\n          key: 'doneTyping',\n          value: function doneTyping(curString, curStrPos) {\n            var _this3 = this; // fires callback function\n\n\n            this.options.onStringTyped(this.arrayPos, this);\n            this.toggleBlinking(true); // is this the final string\n\n            if (this.arrayPos === this.strings.length - 1) {\n              // callback that occurs on the last typed string\n              this.complete(); // quit if we wont loop back\n\n              if (this.loop === false || this.curLoop === this.loopCount) {\n                return;\n              }\n            }\n\n            this.timeout = setTimeout(function () {\n              _this3.backspace(curString, curStrPos);\n            }, this.backDelay);\n          }\n          /**\n           * Backspaces 1 character at a time\n           * @param {string} curString the current string in the strings array\n           * @param {number} curStrPos the current position in the curString\n           * @private\n           */\n\n        }, {\n          key: 'backspace',\n          value: function backspace(curString, curStrPos) {\n            var _this4 = this;\n\n            if (this.pause.status === true) {\n              this.setPauseStatus(curString, curStrPos, true);\n              return;\n            }\n\n            if (this.fadeOut) return this.initFadeOut();\n            this.toggleBlinking(false);\n            var humanize = this.humanizer(this.backSpeed);\n            this.timeout = setTimeout(function () {\n              curStrPos = _htmlParserJs.htmlParser.backSpaceHtmlChars(curString, curStrPos, _this4); // replace text with base text + typed characters\n\n              var curStringAtPosition = curString.substr(0, curStrPos);\n\n              _this4.replaceText(curStringAtPosition); // if smartBack is enabled\n\n\n              if (_this4.smartBackspace) {\n                // the remaining part of the current string is equal of the same part of the new string\n                var nextString = _this4.strings[_this4.arrayPos + 1];\n\n                if (nextString && curStringAtPosition === nextString.substr(0, curStrPos)) {\n                  _this4.stopNum = curStrPos;\n                } else {\n                  _this4.stopNum = 0;\n                }\n              } // if the number (id of character in current string) is\n              // less than the stop number, keep going\n\n\n              if (curStrPos > _this4.stopNum) {\n                // subtract characters one by one\n                curStrPos--; // loop the function\n\n                _this4.backspace(curString, curStrPos);\n              } else if (curStrPos <= _this4.stopNum) {\n                // if the stop number has been reached, increase\n                // array position to next string\n                _this4.arrayPos++; // When looping, begin at the beginning after backspace complete\n\n                if (_this4.arrayPos === _this4.strings.length) {\n                  _this4.arrayPos = 0;\n\n                  _this4.options.onLastStringBackspaced();\n\n                  _this4.shuffleStringsIfNeeded();\n\n                  _this4.begin();\n                } else {\n                  _this4.typewrite(_this4.strings[_this4.sequence[_this4.arrayPos]], curStrPos);\n                }\n              } // humanized value for typing\n\n            }, humanize);\n          }\n          /**\n           * Full animation is complete\n           * @private\n           */\n\n        }, {\n          key: 'complete',\n          value: function complete() {\n            this.options.onComplete(this);\n\n            if (this.loop) {\n              this.curLoop++;\n            } else {\n              this.typingComplete = true;\n            }\n          }\n          /**\n           * Has the typing been stopped\n           * @param {string} curString the current string in the strings array\n           * @param {number} curStrPos the current position in the curString\n           * @param {boolean} isTyping\n           * @private\n           */\n\n        }, {\n          key: 'setPauseStatus',\n          value: function setPauseStatus(curString, curStrPos, isTyping) {\n            this.pause.typewrite = isTyping;\n            this.pause.curString = curString;\n            this.pause.curStrPos = curStrPos;\n          }\n          /**\n           * Toggle the blinking cursor\n           * @param {boolean} isBlinking\n           * @private\n           */\n\n        }, {\n          key: 'toggleBlinking',\n          value: function toggleBlinking(isBlinking) {\n            if (!this.cursor) return; // if in paused state, don't toggle blinking a 2nd time\n\n            if (this.pause.status) return;\n            if (this.cursorBlinking === isBlinking) return;\n            this.cursorBlinking = isBlinking;\n\n            if (isBlinking) {\n              this.cursor.classList.add('typed-cursor--blink');\n            } else {\n              this.cursor.classList.remove('typed-cursor--blink');\n            }\n          }\n          /**\n           * Speed in MS to type\n           * @param {number} speed\n           * @private\n           */\n\n        }, {\n          key: 'humanizer',\n          value: function humanizer(speed) {\n            return Math.round(Math.random() * speed / 2) + speed;\n          }\n          /**\n           * Shuffle the sequence of the strings array\n           * @private\n           */\n\n        }, {\n          key: 'shuffleStringsIfNeeded',\n          value: function shuffleStringsIfNeeded() {\n            if (!this.shuffle) return;\n            this.sequence = this.sequence.sort(function () {\n              return Math.random() - 0.5;\n            });\n          }\n          /**\n           * Adds a CSS class to fade out current string\n           * @private\n           */\n\n        }, {\n          key: 'initFadeOut',\n          value: function initFadeOut() {\n            var _this5 = this;\n\n            this.el.className += ' ' + this.fadeOutClass;\n            if (this.cursor) this.cursor.className += ' ' + this.fadeOutClass;\n            return setTimeout(function () {\n              _this5.arrayPos++;\n\n              _this5.replaceText(''); // Resets current string if end of loop reached\n\n\n              if (_this5.strings.length > _this5.arrayPos) {\n                _this5.typewrite(_this5.strings[_this5.sequence[_this5.arrayPos]], 0);\n              } else {\n                _this5.typewrite(_this5.strings[0], 0);\n\n                _this5.arrayPos = 0;\n              }\n            }, this.fadeOutDelay);\n          }\n          /**\n           * Replaces current text in the HTML element\n           * depending on element type\n           * @param {string} str\n           * @private\n           */\n\n        }, {\n          key: 'replaceText',\n          value: function replaceText(str) {\n            if (this.attr) {\n              this.el.setAttribute(this.attr, str);\n            } else {\n              if (this.isInput) {\n                this.el.value = str;\n              } else if (this.contentType === 'html') {\n                this.el.innerHTML = str;\n              } else {\n                this.el.textContent = str;\n              }\n            }\n          }\n          /**\n           * If using input elements, bind focus in order to\n           * start and stop the animation\n           * @private\n           */\n\n        }, {\n          key: 'bindFocusEvents',\n          value: function bindFocusEvents() {\n            var _this6 = this;\n\n            if (!this.isInput) return;\n            this.el.addEventListener('focus', function (e) {\n              _this6.stop();\n            });\n            this.el.addEventListener('blur', function (e) {\n              if (_this6.el.value && _this6.el.value.length !== 0) {\n                return;\n              }\n\n              _this6.start();\n            });\n          }\n          /**\n           * On init, insert the cursor element\n           * @private\n           */\n\n        }, {\n          key: 'insertCursor',\n          value: function insertCursor() {\n            if (!this.showCursor) return;\n            if (this.cursor) return;\n            this.cursor = document.createElement('span');\n            this.cursor.className = 'typed-cursor';\n            this.cursor.innerHTML = this.cursorChar;\n            this.el.parentNode && this.el.parentNode.insertBefore(this.cursor, this.el.nextSibling);\n          }\n        }]);\n\n        return Typed;\n      }();\n\n      exports['default'] = Typed;\n      module.exports = exports['default'];\n      /***/\n    },\n    /* 1 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      'use strict';\n\n      Object.defineProperty(exports, '__esModule', {\n        value: true\n      });\n\n      var _extends = Object.assign || function (target) {\n        for (var i = 1; i < arguments.length; i++) {\n          var source = arguments[i];\n\n          for (var key in source) {\n            if (Object.prototype.hasOwnProperty.call(source, key)) {\n              target[key] = source[key];\n            }\n          }\n        }\n\n        return target;\n      };\n\n      var _createClass = function () {\n        function defineProperties(target, props) {\n          for (var i = 0; i < props.length; i++) {\n            var descriptor = props[i];\n            descriptor.enumerable = descriptor.enumerable || false;\n            descriptor.configurable = true;\n            if ('value' in descriptor) descriptor.writable = true;\n            Object.defineProperty(target, descriptor.key, descriptor);\n          }\n        }\n\n        return function (Constructor, protoProps, staticProps) {\n          if (protoProps) defineProperties(Constructor.prototype, protoProps);\n          if (staticProps) defineProperties(Constructor, staticProps);\n          return Constructor;\n        };\n      }();\n\n      function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : {\n          'default': obj\n        };\n      }\n\n      function _classCallCheck(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n          throw new TypeError('Cannot call a class as a function');\n        }\n      }\n\n      var _defaultsJs = __webpack_require__(2);\n\n      var _defaultsJs2 = _interopRequireDefault(_defaultsJs);\n      /**\n       * Initialize the Typed object\n       */\n\n\n      var Initializer = function () {\n        function Initializer() {\n          _classCallCheck(this, Initializer);\n        }\n\n        _createClass(Initializer, [{\n          key: 'load',\n\n          /**\n           * Load up defaults & options on the Typed instance\n           * @param {Typed} self instance of Typed\n           * @param {object} options options object\n           * @param {string} elementId HTML element ID _OR_ instance of HTML element\n           * @private\n           */\n          value: function load(self, options, elementId) {\n            // chosen element to manipulate text\n            if (typeof elementId === 'string') {\n              self.el = document.querySelector(elementId);\n            } else {\n              self.el = elementId;\n            }\n\n            self.options = _extends({}, _defaultsJs2['default'], options); // attribute to type into\n\n            self.isInput = self.el.tagName.toLowerCase() === 'input';\n            self.attr = self.options.attr;\n            self.bindInputFocusEvents = self.options.bindInputFocusEvents; // show cursor\n\n            self.showCursor = self.isInput ? false : self.options.showCursor; // custom cursor\n\n            self.cursorChar = self.options.cursorChar; // Is the cursor blinking\n\n            self.cursorBlinking = true; // text content of element\n\n            self.elContent = self.attr ? self.el.getAttribute(self.attr) : self.el.textContent; // html or plain text\n\n            self.contentType = self.options.contentType; // typing speed\n\n            self.typeSpeed = self.options.typeSpeed; // add a delay before typing starts\n\n            self.startDelay = self.options.startDelay; // backspacing speed\n\n            self.backSpeed = self.options.backSpeed; // only backspace what doesn't match the previous string\n\n            self.smartBackspace = self.options.smartBackspace; // amount of time to wait before backspacing\n\n            self.backDelay = self.options.backDelay; // Fade out instead of backspace\n\n            self.fadeOut = self.options.fadeOut;\n            self.fadeOutClass = self.options.fadeOutClass;\n            self.fadeOutDelay = self.options.fadeOutDelay; // variable to check whether typing is currently paused\n\n            self.isPaused = false; // input strings of text\n\n            self.strings = self.options.strings.map(function (s) {\n              return s.trim();\n            }); // div containing strings\n\n            if (typeof self.options.stringsElement === 'string') {\n              self.stringsElement = document.querySelector(self.options.stringsElement);\n            } else {\n              self.stringsElement = self.options.stringsElement;\n            }\n\n            if (self.stringsElement) {\n              self.strings = [];\n              self.stringsElement.style.display = 'none';\n              var strings = Array.prototype.slice.apply(self.stringsElement.children);\n              var stringsLength = strings.length;\n\n              if (stringsLength) {\n                for (var i = 0; i < stringsLength; i += 1) {\n                  var stringEl = strings[i];\n                  self.strings.push(stringEl.innerHTML.trim());\n                }\n              }\n            } // character number position of current string\n\n\n            self.strPos = 0; // current array position\n\n            self.arrayPos = 0; // index of string to stop backspacing on\n\n            self.stopNum = 0; // Looping logic\n\n            self.loop = self.options.loop;\n            self.loopCount = self.options.loopCount;\n            self.curLoop = 0; // shuffle the strings\n\n            self.shuffle = self.options.shuffle; // the order of strings\n\n            self.sequence = [];\n            self.pause = {\n              status: false,\n              typewrite: true,\n              curString: '',\n              curStrPos: 0\n            }; // When the typing is complete (when not looped)\n\n            self.typingComplete = false; // Set the order in which the strings are typed\n\n            for (var i in self.strings) {\n              self.sequence[i] = i;\n            } // If there is some text in the element\n\n\n            self.currentElContent = this.getCurrentElContent(self);\n            self.autoInsertCss = self.options.autoInsertCss;\n            this.appendAnimationCss(self);\n          }\n        }, {\n          key: 'getCurrentElContent',\n          value: function getCurrentElContent(self) {\n            var elContent = '';\n\n            if (self.attr) {\n              elContent = self.el.getAttribute(self.attr);\n            } else if (self.isInput) {\n              elContent = self.el.value;\n            } else if (self.contentType === 'html') {\n              elContent = self.el.innerHTML;\n            } else {\n              elContent = self.el.textContent;\n            }\n\n            return elContent;\n          }\n        }, {\n          key: 'appendAnimationCss',\n          value: function appendAnimationCss(self) {\n            var cssDataName = 'data-typed-js-css';\n\n            if (!self.autoInsertCss) {\n              return;\n            }\n\n            if (!self.showCursor && !self.fadeOut) {\n              return;\n            }\n\n            if (document.querySelector('[' + cssDataName + ']')) {\n              return;\n            }\n\n            var css = document.createElement('style');\n            css.type = 'text/css';\n            css.setAttribute(cssDataName, true);\n            var innerCss = '';\n\n            if (self.showCursor) {\n              innerCss += '\\n        .typed-cursor{\\n          opacity: 1;\\n        }\\n        .typed-cursor.typed-cursor--blink{\\n          animation: typedjsBlink 0.7s infinite;\\n          -webkit-animation: typedjsBlink 0.7s infinite;\\n                  animation: typedjsBlink 0.7s infinite;\\n        }\\n        @keyframes typedjsBlink{\\n          50% { opacity: 0.0; }\\n        }\\n        @-webkit-keyframes typedjsBlink{\\n          0% { opacity: 1; }\\n          50% { opacity: 0.0; }\\n          100% { opacity: 1; }\\n        }\\n      ';\n            }\n\n            if (self.fadeOut) {\n              innerCss += '\\n        .typed-fade-out{\\n          opacity: 0;\\n          transition: opacity .25s;\\n        }\\n        .typed-cursor.typed-cursor--blink.typed-fade-out{\\n          -webkit-animation: 0;\\n          animation: 0;\\n        }\\n      ';\n            }\n\n            if (css.length === 0) {\n              return;\n            }\n\n            css.innerHTML = innerCss;\n            document.body.appendChild(css);\n          }\n        }]);\n\n        return Initializer;\n      }();\n\n      exports['default'] = Initializer;\n      var initializer = new Initializer();\n      exports.initializer = initializer;\n      /***/\n    },\n    /* 2 */\n\n    /***/\n    function (module, exports) {\n      /**\n       * Defaults & options\n       * @returns {object} Typed defaults & options\n       * @public\n       */\n      'use strict';\n\n      Object.defineProperty(exports, '__esModule', {\n        value: true\n      });\n      var defaults = {\n        /**\n         * @property {array} strings strings to be typed\n         * @property {string} stringsElement ID of element containing string children\n         */\n        strings: ['These are the default values...', 'You know what you should do?', 'Use your own!', 'Have a great day!'],\n        stringsElement: null,\n\n        /**\n         * @property {number} typeSpeed type speed in milliseconds\n         */\n        typeSpeed: 0,\n\n        /**\n         * @property {number} startDelay time before typing starts in milliseconds\n         */\n        startDelay: 0,\n\n        /**\n         * @property {number} backSpeed backspacing speed in milliseconds\n         */\n        backSpeed: 0,\n\n        /**\n         * @property {boolean} smartBackspace only backspace what doesn't match the previous string\n         */\n        smartBackspace: true,\n\n        /**\n         * @property {boolean} shuffle shuffle the strings\n         */\n        shuffle: false,\n\n        /**\n         * @property {number} backDelay time before backspacing in milliseconds\n         */\n        backDelay: 700,\n\n        /**\n         * @property {boolean} fadeOut Fade out instead of backspace\n         * @property {string} fadeOutClass css class for fade animation\n         * @property {boolean} fadeOutDelay Fade out delay in milliseconds\n         */\n        fadeOut: false,\n        fadeOutClass: 'typed-fade-out',\n        fadeOutDelay: 500,\n\n        /**\n         * @property {boolean} loop loop strings\n         * @property {number} loopCount amount of loops\n         */\n        loop: false,\n        loopCount: Infinity,\n\n        /**\n         * @property {boolean} showCursor show cursor\n         * @property {string} cursorChar character for cursor\n         * @property {boolean} autoInsertCss insert CSS for cursor and fadeOut into HTML <head>\n         */\n        showCursor: true,\n        cursorChar: '|',\n        autoInsertCss: true,\n\n        /**\n         * @property {string} attr attribute for typing\n         * Ex: input placeholder, value, or just HTML text\n         */\n        attr: null,\n\n        /**\n         * @property {boolean} bindInputFocusEvents bind to focus and blur if el is text input\n         */\n        bindInputFocusEvents: false,\n\n        /**\n         * @property {string} contentType 'html' or 'null' for plaintext\n         */\n        contentType: 'html',\n\n        /**\n         * All typing is complete\n         * @param {Typed} self\n         */\n        onComplete: function onComplete(self) {},\n\n        /**\n         * Before each string is typed\n         * @param {number} arrayPos\n         * @param {Typed} self\n         */\n        preStringTyped: function preStringTyped(arrayPos, self) {},\n\n        /**\n         * After each string is typed\n         * @param {number} arrayPos\n         * @param {Typed} self\n         */\n        onStringTyped: function onStringTyped(arrayPos, self) {},\n\n        /**\n         * During looping, after last string is typed\n         * @param {Typed} self\n         */\n        onLastStringBackspaced: function onLastStringBackspaced(self) {},\n\n        /**\n         * Typing has been stopped\n         * @param {number} arrayPos\n         * @param {Typed} self\n         */\n        onTypingPaused: function onTypingPaused(arrayPos, self) {},\n\n        /**\n         * Typing has been started after being stopped\n         * @param {number} arrayPos\n         * @param {Typed} self\n         */\n        onTypingResumed: function onTypingResumed(arrayPos, self) {},\n\n        /**\n         * After reset\n         * @param {Typed} self\n         */\n        onReset: function onReset(self) {},\n\n        /**\n         * After stop\n         * @param {number} arrayPos\n         * @param {Typed} self\n         */\n        onStop: function onStop(arrayPos, self) {},\n\n        /**\n         * After start\n         * @param {number} arrayPos\n         * @param {Typed} self\n         */\n        onStart: function onStart(arrayPos, self) {},\n\n        /**\n         * After destroy\n         * @param {Typed} self\n         */\n        onDestroy: function onDestroy(self) {}\n      };\n      exports['default'] = defaults;\n      module.exports = exports['default'];\n      /***/\n    },\n    /* 3 */\n\n    /***/\n    function (module, exports) {\n      /**\n       * TODO: These methods can probably be combined somehow\n       * Parse HTML tags & HTML Characters\n       */\n      'use strict';\n\n      Object.defineProperty(exports, '__esModule', {\n        value: true\n      });\n\n      var _createClass = function () {\n        function defineProperties(target, props) {\n          for (var i = 0; i < props.length; i++) {\n            var descriptor = props[i];\n            descriptor.enumerable = descriptor.enumerable || false;\n            descriptor.configurable = true;\n            if ('value' in descriptor) descriptor.writable = true;\n            Object.defineProperty(target, descriptor.key, descriptor);\n          }\n        }\n\n        return function (Constructor, protoProps, staticProps) {\n          if (protoProps) defineProperties(Constructor.prototype, protoProps);\n          if (staticProps) defineProperties(Constructor, staticProps);\n          return Constructor;\n        };\n      }();\n\n      function _classCallCheck(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n          throw new TypeError('Cannot call a class as a function');\n        }\n      }\n\n      var HTMLParser = function () {\n        function HTMLParser() {\n          _classCallCheck(this, HTMLParser);\n        }\n\n        _createClass(HTMLParser, [{\n          key: 'typeHtmlChars',\n\n          /**\n           * Type HTML tags & HTML Characters\n           * @param {string} curString Current string\n           * @param {number} curStrPos Position in current string\n           * @param {Typed} self instance of Typed\n           * @returns {number} a new string position\n           * @private\n           */\n          value: function typeHtmlChars(curString, curStrPos, self) {\n            if (self.contentType !== 'html') return curStrPos;\n            var curChar = curString.substr(curStrPos).charAt(0);\n\n            if (curChar === '<' || curChar === '&') {\n              var endTag = '';\n\n              if (curChar === '<') {\n                endTag = '>';\n              } else {\n                endTag = ';';\n              }\n\n              while (curString.substr(curStrPos + 1).charAt(0) !== endTag) {\n                curStrPos++;\n\n                if (curStrPos + 1 > curString.length) {\n                  break;\n                }\n              }\n\n              curStrPos++;\n            }\n\n            return curStrPos;\n          }\n          /**\n           * Backspace HTML tags and HTML Characters\n           * @param {string} curString Current string\n           * @param {number} curStrPos Position in current string\n           * @param {Typed} self instance of Typed\n           * @returns {number} a new string position\n           * @private\n           */\n\n        }, {\n          key: 'backSpaceHtmlChars',\n          value: function backSpaceHtmlChars(curString, curStrPos, self) {\n            if (self.contentType !== 'html') return curStrPos;\n            var curChar = curString.substr(curStrPos).charAt(0);\n\n            if (curChar === '>' || curChar === ';') {\n              var endTag = '';\n\n              if (curChar === '>') {\n                endTag = '<';\n              } else {\n                endTag = '&';\n              }\n\n              while (curString.substr(curStrPos - 1).charAt(0) !== endTag) {\n                curStrPos--;\n\n                if (curStrPos < 0) {\n                  break;\n                }\n              }\n\n              curStrPos--;\n            }\n\n            return curStrPos;\n          }\n        }]);\n\n        return HTMLParser;\n      }();\n\n      exports['default'] = HTMLParser;\n      var htmlParser = new HTMLParser();\n      exports.htmlParser = htmlParser;\n      /***/\n    }])\n  );\n});\n\n;"],"sourceRoot":""}